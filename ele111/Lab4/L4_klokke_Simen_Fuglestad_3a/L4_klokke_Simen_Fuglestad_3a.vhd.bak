library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity L4_klokke_Simen_Fuglestad is
	port (
			CLOCK_50 	: in std_logic;
			KEY 			: in std_logic_vector(3 downto 0);
			SW				: in std_logic_vector(2 downto 0);
			LEDR 			: out std_logic_vector(17 downto 0);
			HEX0,
			HEX1,
			HEX2,
			HEX3,
			HEX4,
			HEX5			: out std_logic_vector(6 downto 0)
	);
end entity L4_klokke_Simen_Fuglestad;

architecture RTL of L4_klokke_Simen_Fuglestad is

	component Enable_gen Is
		port (
				clock_50 	: in std_logic;
				resetn 		: in std_logic;
				velg_enable	: in std_logic_vector(2 downto 0);
				Enable		: out std_logic
		);
	end component;
	
	signal hallo 			: std_logic;
	signal clk_50 			: std_logic;
	signal enable_in 		: std_logic_vector(2 downto 0);
	signal enable_temp 	: std_logic_vector(2 downto 0);
	signal resetn			: std_logic;
	signal t 				: integer range 0 to 50000000;
	signal enable_out		: std_logic;
	
begin
	LEDR(17) <= hallo;
	clk_50 <= CLOCK_50;
	resetn <= KEY(0);
	enable_in <= "001";
	
	enable_gen_1 : Enable_gen
		port  map(
			clock_50 	=> clk_50,
			resetn 		=> resetn,
			velg_enable => enable_in,
			enable 		=> enable_out
	);
	
	blink : process(CLOCK_50)
	variable a : std_logic := '0';
	begin
		if rising_edge(CLOCK_50) then
			if enable_out = '1' then
				hallo <= '1';
--				if t /= 0 then
--					t <= 0;
--				end if;
			end if;
			
			if hallo = '1' then
				t <= t + 1;
				if t = 12_500_000 then -- make value of t as function of enable_in! 50_000_000 if enable_in 000 etc
					hallo <= '0';
					t <= 0;
				end if;
			end if;
		end if;
	end process blink;
end architecture RTL;
		